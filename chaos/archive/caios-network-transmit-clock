
CAIOS NETWORK TRANSMIT CLOCK

Some specifications.
A. Target information rate, 1 * 10**7 bits per second, not discounting
 for overhead.
B. Order of bits on medium.
	I.	16 bit error detect code.
	II.	16 bit source number.
	III.	16 bit destination number.
	IV.	Data (multiple of 16 bits)
	V.	1 bit which is always zero, at the end of the message
		 as it appears on the medium.
	( Basic overhead enforced by the hardware, 49 bits.)

C. Basic time interval (tick), 50 ns. (=1/(2*information_rate))
D. Bit time (tock), 100 ns. (=1/information_rate)
E. Modulation technique:
	I. Bits are sent serially.
	II. Alternate ticks are clock ticks.
	III. The tick following a clock tick is the corresponding data
	 tick.
	IV. A message starts with the output low just before the first
	 clock tick of the message.
	V. There is a clock tick (and corresponding data tick) for each
	 bit of the message.
	VI. At each clock tick durring the message, the output changes
	 state.
	VII. At each data tick during the message, the output assumes
	 the state of the corresponding data bit to be sent.

  _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   _
_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_| |_|  Basic clock

 |       |       |       |       |       |       |       |       |      Clock ticks

     |       |       |       |       |       |       |       |       |  Data ticks

     0       0       1       1       0       1       1       1       0  Sample bits
  ___     ___     _______     ___         _______     ___     ___
_|   |___|   |___|       |___|   |_______|       |___|   |___|   |_____ Encoded data

F. Aborting transmission:
	I. An interface that is transmitting recognizes an abort condition
	 when it sees that the medium does not follow its output. This
	 will recognize both multiple seizure and Abort Signal (which is
	 really a form of multiple seizure).
	II. An interface that is not transmitting recognizes an abort
	 condition when it sees its address as the destination of the
	 message currently on the medium, and its recieve buffer is
	 busy.
	III. If an interface detects an abort condition, it asserts a
	 solid one output for greater than two ticks. This shall be
	 known as "Abort Signal". (Actually, the one output lasts for
	 between 7 and 8 ticks, 3.5 and 4 clock ticks.)
	IV. A reciever (interface that is not transmitting) must recognize
	 abort signal and discard the partially recieved message.
G. Taking turns:
	I. The medium is said to be free when it has remained in the zero
	 state for the last 3 ticks. (The interface detects the last 3 to 4
	 for this purpose.)
	II. Each interface, reguardless of whatever else it may be doing,
	 takes note of the source address number of any message on the medium
	 that gets that far, subtracts its own number from it, and puts this
	 difference in a counter. This counter counts at an as yet undetermined
	 rate whenever the medium is free. The modulus of this counter is a
	 power of 2, but is as yet otherwise undetermined. This counter is
	 called the "MY TURN" counter.
	III. When an interface is ready to transmit, it waits for the MY TURN
	 counter to transition into its logical zero state before begining to
	 transmit. (The logical zero state of the MY TURN counter is the binary
	 number equal to half of the counter's modulus.)
	IV. A possible hazard is that a transmitter might notice that the medium
	 has gone to the free state, be the next source number, count its MY
	 TURN counter, which will immediately transition to it's logical zero
	 state. This will cause it to start transmitting immediately. There is
	 then a possibility, depending on relative phases of clocks, propagation
	 delays, etc., that a particular reciever might never notice that the
	 medium had been free, thereby thinking that the new bits are part of
	 the old message. There are some start-up delays in the transmitter
	 as currently designed, but it remains to be decided as to whether they
	 are enough. (This is a non-existent problem - H)
H. Length restrictions:
	I. The maximum length of a message is 1025 bits, including all overhead.
	II. The first transmitter design will only send messages whose bit length
	 is one greater than an integral multiple of sixteen, including all
	 overhead (not including overhead, an integral multiple of 16 bits).
	III. The minimum message is the overhead bits only, 49 bits long.
I. Error detection:
	I. Error detection is done by checking a 16 bit cyclic redundancy word
	 included in each message as part of the overhead. The check word is
	 generated by the hardware using the polynomial: X^16 + X^15 + X^2 + 1.
	II. The check is made over all message bits, the source number overhead
	 bits, and the destination number bits. There is no harm in leaving the
	 single always zero overhead bit out of the check because its state is
	 known beforehand.
	III. The check word is formed as the bits are put into the transmitter
	 buffer memory. The message is checked as it is put into the reciever
	 buffer memory, messages with errors at this point are automatically
	 discarded by the hardware (which does the checking), unless a special
	 debugging switch is set (under program controll). The message is again
	 checked as it is removed from the reciever buffer, thus checking that
	 memory, and the result of this check is available to the program after
	 the next to last word of the message (the source number) is read.
J. Strangeness:
	I. The bits are sent in the reverse order to that in which they were put
	 into the transmitter buffer. Only the single, always zero, overhead bit,
	 which does not go through the buffer memory, escapes this fate (i.e.; it
	 really is at the end as advertized above). This is for a hardware
	 convenience, and the reciever re-reverses the bits, so the programer need
	 not concern himself with this effect.
	II. The trailing single zero overhead bit is inserted by the transmitter
	 hardware and removed by the reciever hardware, so the programer can ignore
	 this also.
	III. Since the check word can only be generated after all of the other
	 information carrying bits are in the transmitter buffer, it is inserted
	 (automatically) last. Because of the bit reversal on the medium, it is
	 therefore transmitted first.
	IV. To help prevent buggy software from fouling the network more than is
	 necessary, the source address number is generated by the hardware.
	V. To facilitate easy use of the source number by the hardware for the
	 purposes of paragraph G.II, the source number should be near the front
	 of the message as it appears on the medium, or near the back as it is
	 put into the transmitter buffer.
	VI. In view of J.III, IV, and V, the source number is made the second
	 word on the medium, or the next to last word into the transmitter buffer,
	 just before the check word goes in. The request from the program to
	 transmit a message causes automatic insertion of the source number and
	 the check word into the transmitter buffer.
	VII. To facilitate easy checking by a reciever of whether it is the intended
	 reciever of a message on the medium, the destination number should be near
	 the front of the message as it appears on the medium. It is therefore
	 assigned to be the third word of the message on the medium, or the second
	 from last into the transmitter buffer, or the last word provided by the
	 program.
	VIII. So that the subtraction of paragraph G.II may be done serially, it
	 is convenient to have the source number apear low order bit first on
	 the medium. Since this also requires a serial source of the source number
	 of the reciever, and this is also the number checked to see if the reciever
	 is the intended one, it is also convenient to have the destination number
	 apear low order bit first on the medium. For lack of any reason why not,
	 the message content words also apear low order bit first on the medium.
	 (This means that the low order bit of the first word given to the interface
	 by the program is adjacent to the high order bit of the second word, for
	 whatever that information is worth to anyone.)

2) Some philosophy.